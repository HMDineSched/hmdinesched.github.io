<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>DineSched Engine Schedule</title>
  <style>
    /* Basic CSS here or link external stylesheet */
  </style>
</head>
<body>
  <h1>DineSched Engine Schedule</h1>
  <div id="controls">
    <label for="datePicker">Select Date: </label>
    <input type="date" id="datePicker" />
    <label for="locationSelect">Location: </label>
    <select id="locationSelect">
      <option value="East">East</option>
      <option value="West/Grand">West/Grand</option>
      <option value="Oasis">Oasis</option>
      <option value="tbd">tbd</option>
    </select>
  </div>
  <div id="quickView"></div>
  <div id="scheduleTables"></div>

  <script>
    // Utility functions

    // Arizona Time helper
    function getArizonaDate(date = new Date()) {
      // Convert input date to Arizona TZ (GMT-7 no DST)
      // Approximate by offset; assumes no DST
      const utc = date.getTime() + (date.getTimezoneOffset() * 60000);
      const azOffset = -7 * 60; // AZ is UTC-7 in minutes
      return new Date(utc + (azOffset * 60000));
    }

    // Get Monday of week containing date
    function getMonday(date) {
      const d = new Date(date);
      const day = d.getDay();
      const diff = d.getDate() - day + (day === 0 ? -6 : 1); // adjust when Sunday
      return new Date(d.setDate(diff));
    }

    // Format date YYYY-MM-DD
    function formatDate(date) {
      const y = date.getFullYear();
      const m = ('0' + (date.getMonth() + 1)).slice(-2);
      const d = ('0' + date.getDate()).slice(-2);
      return `${y}-${m}-${d}`;
    }

    // Determine earliest date to load JSON for week
    function getEarliestDateForWeek() {
      const azToday = getArizonaDate();
      const monday = getMonday(azToday);
      return formatDate(monday);
    }

    // *** JSON Load Placeholder ***
	    const earliestDate = getEarliestDateForWeek();

    const jsonUrl = `https://raw.githubusercontent.com/yourusername/yourrepo/main/schedules/${earliestDate}.json`;

    let scheduleData = null;

    fetch(jsonUrl)
      .then(response => {
        if (!response.ok) throw new Error('Network response was not ok');
        return response.json();
      })
      .then(json => {
        scheduleData = json;
        initializeUI();
      })
      .catch(error => {
        console.error('Failed to load schedule JSON:', error);
        // Optional fallback or user message here
      });
	  <script>
  // Utility: Arizona date (GMT-7 no DST)
  function getArizonaDate() {
    const now = new Date();
    const utc = now.getTime() + now.getTimezoneOffset() * 60000;
    const azOffset = -7 * 60; // Arizona is UTC-7 year-round
    return new Date(utc + azOffset * 60000);
  }

  // Get Monday of week containing given date
  function getMonday(date) {
    const d = new Date(date);
    const day = d.getDay();
    const diff = (day === 0 ? -6 : 1) - day;
    d.setDate(d.getDate() + diff);
    return d;
  }

  // Format date YYYY-MM-DD
  function formatDate(d) {
    return d.toISOString().slice(0, 10);
  }

  // Format date for table header: DayAbbr MM/DD
  function formatHeaderDate(d) {
    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    const mm = String(d.getMonth() + 1).padStart(2, '0');
    const dd = String(d.getDate()).padStart(2, '0');
    return `${dayNames[d.getDay()]} ${mm}/${dd}`;
  }

  // Global variables
  let scheduleData = {}; // Loaded JSON data here
  let currentMonday = null; // Monday date of current week

  // Known locations - use this for tables
  const locations = ['East', 'West/Grand', 'Oasis', 'tbd'];

  // Staff location overrides (for filtering)
  const eastStaff = ['Nathan', 'Brandon', 'Jerry', 'Melissa', 'Megan', 'Lisa', 'Nico', 'Ellie'];
  const oasisStaff = ['December', 'Eli', 'Marcial'];

  // Get selected date from date picker as YYYY-MM-DD string
  function getSelectedDate() {
    const picker = document.getElementById('datePicker');
    return picker.value;
  }

  // Get selected location from dropdown
  function getSelectedLocation() {
    const loc = document.getElementById('locationSelect');
    return loc.value;
  }

  // Render Quick View panel: filtered by selected date and location
  function renderQuickView() {
    const date = getSelectedDate();
    const location = getSelectedLocation();
    const container = document.getElementById('quickView');
    container.innerHTML = '';

    if (!scheduleData || Object.keys(scheduleData).length === 0) {
      container.textContent = 'No schedule data loaded.';
      return;
    }

    // Filter staff by location
    const filteredStaff = Object.keys(scheduleData).filter(name => {
      if (location === 'East') return eastStaff.includes(name);
      if (location === 'Oasis') return oasisStaff.includes(name);
      if (location === 'West/Grand') return !eastStaff.includes(name) && !oasisStaff.includes(name);
      if (location === 'tbd') return true; // show all
      return false;
    });

    // Build list of name + shift on selected date
    const list = document.createElement('ul');
    let foundAny = false;

    filteredStaff.forEach(name => {
      const shifts = scheduleData[name];
      if (!shifts) return;
      const shift = shifts[date] || '';
      if (shift.trim() !== '') {
        foundAny = true;
        const li = document.createElement('li');
        li.textContent = `${name}: ${shift}`;
        list.appendChild(li);
      }
    });

    if (!foundAny) {
      container.textContent = 'No shifts for selected date and location.';
      return;
    }

    container.appendChild(list);
  }

  // Render Weekly Tables for all locations
  function renderTables() {
    const container = document.getElementById('tablesContainer');
    container.innerHTML = '';

    if (!currentMonday) {
      container.textContent = 'No week selected.';
      return;
    }
    if (!scheduleData || Object.keys(scheduleData).length === 0) {
      container.textContent = 'No schedule data loaded.';
      return;
    }

    // Calculate the 7 days of the week from Monday
    const weekDates = [];
    for (let i = 0; i < 7; i++) {
      const d = new Date(currentMonday);
      d.setDate(d.getDate() + i);
      weekDates.push(d);
    }

    // Week header
    const weekHeader = document.createElement('h2');
    weekHeader.textContent = `Week of ${formatDate(currentMonday)}`;
    container.appendChild(weekHeader);

    // Render each location table
    locations.forEach(loc => {
      const table = document.createElement('table');
      table.className = 'schedule-table';

      // Caption for location
      const caption = document.createElement('caption');
      caption.textContent = loc;
      table.appendChild(caption);

      // Header row (Sun-Sat)
      const thead = document.createElement('thead');
      const headRow = document.createElement('tr');
      headRow.appendChild(document.createElement('th')); // empty corner cell

      weekDates.forEach(d => {
        const th = document.createElement('th');
        th.textContent = formatHeaderDate(d);
        headRow.appendChild(th);
      });
      thead.appendChild(headRow);
      table.appendChild(thead);

      // Body rows: staff names filtered by location
      const tbody = document.createElement('tbody');
      const staffNames = Object.keys(scheduleData).filter(name => {
        if (loc === 'East') return eastStaff.includes(name);
        if (loc === 'Oasis') return oasisStaff.includes(name);
        if (loc === 'West/Grand') return !eastStaff.includes(name) && !oasisStaff.includes(name);
        if (loc === 'tbd') return true;
        return false;
      }).sort();

      staffNames.forEach(name => {
        const tr = document.createElement('tr');
        const nameCell = document.createElement('td');
        nameCell.textContent = name;
        tr.appendChild(nameCell);

        weekDates.forEach(d => {
          const dateStr = formatDate(d);
          const td = document.createElement('td');
          const shift = scheduleData[name][dateStr] || '';
          td.textContent = shift;
          tr.appendChild(td);
        });

        tbody.appendChild(tr);
      });

      table.appendChild(tbody);
      container.appendChild(table);
    });
  }

  // Initialize UI and load default week + date
  function initializeUI() {
    const datePicker = document.getElementById('datePicker');
    const locationSelect = document.getElementById('locationSelect');

    // Set default date = today (Arizona time)
    const azToday = getArizonaDate();
    const azTodayStr = formatDate(azToday);
    datePicker.value = azTodayStr;

    // Calculate and store current Monday
    currentMonday = getMonday(azToday);

    // Default location
    locationSelect.value = 'East';

    // Event listeners
    datePicker.addEventListener('change', () => {
      renderQuickView();
      renderTables();
    });

    locationSelect.addEventListener('change', () => {
      renderQuickView();
    });

    // Initial renders
    renderQuickView();
    renderTables();
  }

  // After JSON is loaded and assigned to scheduleData, call initializeUI
  // Example:
  // scheduleData = {...json data here...}
  // initializeUI();

</script>
